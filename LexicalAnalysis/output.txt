CONSTTK const
INTTK int
IDENFR const1
ASSIGN =
PLUS +
INTCON 1
COMMA ,
IDENFR const2
ASSIGN =
MINU -
INTCON 100
SEMICN ;
CONSTTK const
CHARTK char
IDENFR const3
ASSIGN =
CHARCON _
SEMICN ;
INTTK int
IDENFR change1
COMMA ,
IDENFR _int0
COMMA ,
IDENFR int1_
COMMA ,
IDENFR int2
SEMICN ;
CHARTK char
IDENFR change3
COMMA ,
IDENFR _char0
COMMA ,
IDENFR ch_1
SEMICN ;
CONSTTK const
INTTK int
IDENFR _arr_Int2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
CHARTK char
IDENFR char_arr
LBRACK [
INTCON 12
RBRACK ]
ASSIGN =
STRCON string _+con
SEMICN ;
IDENFR change1
ASSIGN =
PLUS +
INTCON 0
SEMICN ;
IDENFR _int0
ASSIGN =
IDENFR change1
PLUS +
IDENFR const2
SEMICN ;
IDENFR int1_
ASSIGN =
IDENFR _int0
MULT *
IDENFR int2
SEMICN ;
IDENFR int2
ASSIGN =
INTCON 1029348
SEMICN ;
IDENFR change3
ASSIGN =
CHARCON +
SEMICN ;
IDENFR _char0
ASSIGN =
CHARCON 0
SEMICN ;
IDENFR ch_1
ASSIGN =
IDENFR change3
PLUS +
IDENFR _char0
SEMICN ;
INTTK int
IDENFR gets1
LPARENT (
INTTK int
IDENFR var1
COMMA ,
INTTK int
IDENFR var2
RPARENT )
LBRACE {
IDENFR change1
ASSIGN =
IDENFR var1
PLUS +
IDENFR var2
SEMICN ;
RETURNTK return
LPARENT (
IDENFR change1
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func1
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
COMMA ,
IDENFR j
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
LSS <
IDENFR j
RPARENT )
RETURNTK return
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
MINU -
INTCON 1
SEMICN ;
RBRACE }
CHARTK char
IDENFR func2
LPARENT (
CHARTK char
IDENFR ch
COMMA ,
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR ch
PLUS +
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CHARTK char
IDENFR ch
ASSIGN =
CHARCON +
SEMICN ;
INTTK int
IDENFR cnt
SEMICN ;
SCANFTK scanf
LPARENT (
STRCON %d\n
COMMA ,
IDENFR cnt
RPARENT )
SEMICN ;
IDENFR cnt
ASSIGN =
IDENFR cnt
DIV /
IDENFR ch
SEMICN ;
IFTK if
LPARENT (
IDENFR ch
EQL ==
CHARCON -
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON -
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
PRINTFTK printf
LPARENT (
CHARCON +
RPARENT )
SEMICN ;
DOTK do
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 10
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR i
NEQ !=
INTCON 10
RPARENT )
SEMICN ;
FORTK for
LPARENT (
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 10
SEMICN ;
IDENFR i
PLUS +
PLUS +
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON Hello World
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
IDENFR gets1
LPARENT (
INTCON 10
COMMA ,
INTCON 20
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON %s
COMMA ,
IDENFR char_str
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
